
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  fullName: 'fullName',
  phone: 'phone',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatientProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dob: 'dob',
  gender: 'gender',
  medicalHistory: 'medicalHistory',
  medications: 'medications',
  allergies: 'allergies',
  insuranceNumber: 'insuranceNumber',
  address: 'address',
  emergencyContact: 'emergencyContact',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DoctorProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  specialty: 'specialty',
  bio: 'bio',
  yearsExperience: 'yearsExperience',
  clinicName: 'clinicName',
  rating: 'rating',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DoctorSlotScalarFieldEnum = {
  id: 'id',
  doctorId: 'doctorId',
  start: 'start',
  end: 'end',
  isBooked: 'isBooked',
  createdAt: 'createdAt'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  slotId: 'slotId',
  service: 'service',
  scheduledAt: 'scheduledAt',
  status: 'status',
  paymentStatus: 'paymentStatus',
  paymentId: 'paymentId',
  qrCode: 'qrCode',
  cancelReason: 'cancelReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  appointmentId: 'appointmentId',
  provider: 'provider',
  amount: 'amount',
  currency: 'currency',
  providerRef: 'providerRef',
  status: 'status',
  meta: 'meta',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  body: 'body',
  data: 'data',
  readAt: 'readAt',
  createdAt: 'createdAt'
};

exports.Prisma.PasswordResetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  codeHash: 'codeHash',
  expiresAt: 'expiresAt',
  usedAt: 'usedAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  fullName: 'fullName',
  phone: 'phone'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.PatientProfileOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  gender: 'gender',
  insuranceNumber: 'insuranceNumber',
  address: 'address',
  emergencyContact: 'emergencyContact'
};

exports.Prisma.DoctorProfileOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  specialty: 'specialty',
  bio: 'bio',
  clinicName: 'clinicName'
};

exports.Prisma.DoctorSlotOrderByRelevanceFieldEnum = {
  id: 'id',
  doctorId: 'doctorId'
};

exports.Prisma.AppointmentOrderByRelevanceFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  slotId: 'slotId',
  service: 'service',
  paymentId: 'paymentId',
  qrCode: 'qrCode',
  cancelReason: 'cancelReason'
};

exports.Prisma.PaymentOrderByRelevanceFieldEnum = {
  id: 'id',
  appointmentId: 'appointmentId',
  provider: 'provider',
  currency: 'currency',
  providerRef: 'providerRef'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  body: 'body'
};

exports.Prisma.PasswordResetOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  codeHash: 'codeHash'
};
exports.Role = exports.$Enums.Role = {
  PATIENT: 'PATIENT',
  DOCTOR: 'DOCTOR',
  ADMIN: 'ADMIN'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  UNPAID: 'UNPAID',
  REQUIRES_PAYMENT: 'REQUIRES_PAYMENT',
  PAID: 'PAID',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.Prisma.ModelName = {
  User: 'User',
  PatientProfile: 'PatientProfile',
  DoctorProfile: 'DoctorProfile',
  DoctorSlot: 'DoctorSlot',
  Appointment: 'Appointment',
  Payment: 'Payment',
  Notification: 'Notification',
  PasswordReset: 'PasswordReset'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "F:\\BACK-END\\PROJECT-TEST\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "F:\\BACK-END\\PROJECT-TEST\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mysql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// prisma/schema.prisma\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum Role {\n  PATIENT\n  DOCTOR\n  ADMIN\n}\n\nenum AppointmentStatus {\n  PENDING\n  CONFIRMED\n  CANCELLED\n  COMPLETED\n}\n\nenum PaymentStatus {\n  UNPAID\n  REQUIRES_PAYMENT\n  PAID\n  FAILED\n  REFUNDED\n}\n\nmodel User {\n  id        String   @id @default(cuid())\n  email     String   @unique\n  password  String\n  fullName  String\n  phone     String?  @unique\n  role      Role\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  patient             PatientProfile?\n  doctor              DoctorProfile?\n  appointmentsPatient Appointment[]   @relation(\"PatientAppointments\")\n  appointmentsDoctor  Appointment[]   @relation(\"DoctorAppointments\")\n  notifications       Notification[]\n  PasswordReset       PasswordReset[]\n}\n\nmodel PatientProfile {\n  id               String    @id @default(cuid())\n  userId           String    @unique\n  user             User      @relation(fields: [userId], references: [id])\n  dob              DateTime?\n  gender           String?\n  medicalHistory   Json?\n  medications      Json?\n  allergies        Json?\n  insuranceNumber  String?\n  address          String?\n  emergencyContact String?\n  createdAt        DateTime  @default(now())\n  updatedAt        DateTime  @updatedAt\n}\n\nmodel DoctorProfile {\n  id              String   @id @default(cuid())\n  userId          String   @unique\n  user            User     @relation(fields: [userId], references: [id])\n  specialty       String\n  bio             String?\n  yearsExperience Int?\n  clinicName      String?\n  rating          Float?   @default(0)\n  createdAt       DateTime @default(now())\n  updatedAt       DateTime @updatedAt\n\n  slots DoctorSlot[]\n}\n\nmodel DoctorSlot {\n  id           String        @id @default(cuid())\n  doctorId     String\n  doctor       DoctorProfile @relation(fields: [doctorId], references: [id])\n  start        DateTime\n  end          DateTime\n  isBooked     Boolean       @default(false)\n  createdAt    DateTime      @default(now())\n  appointments Appointment[]\n}\n\nmodel Appointment {\n  id            String            @id @default(cuid())\n  patientId     String\n  patient       User              @relation(\"PatientAppointments\", fields: [patientId], references: [id])\n  doctorId      String\n  doctor        User              @relation(\"DoctorAppointments\", fields: [doctorId], references: [id])\n  slotId        String?\n  slot          DoctorSlot?       @relation(fields: [slotId], references: [id])\n  service       String\n  scheduledAt   DateTime\n  status        AppointmentStatus @default(PENDING)\n  paymentStatus PaymentStatus     @default(UNPAID)\n  paymentId     String?\n  qrCode        String?\n  cancelReason  String?\n  createdAt     DateTime          @default(now())\n  updatedAt     DateTime          @updatedAt\n\n  payment Payment?\n}\n\nmodel Payment {\n  id            String        @id @default(cuid())\n  appointmentId String        @unique\n  appointment   Appointment   @relation(fields: [appointmentId], references: [id])\n  provider      String\n  amount        Int\n  currency      String\n  providerRef   String?\n  status        PaymentStatus @default(REQUIRES_PAYMENT)\n  meta          Json?\n  createdAt     DateTime      @default(now())\n  updatedAt     DateTime      @updatedAt\n}\n\nmodel Notification {\n  id        String    @id @default(cuid())\n  userId    String\n  user      User      @relation(fields: [userId], references: [id])\n  type      String\n  title     String\n  body      String\n  data      Json?\n  readAt    DateTime?\n  createdAt DateTime  @default(now())\n}\n\nmodel PasswordReset {\n  id        String    @id @default(cuid())\n  userId    String\n  user      User      @relation(fields: [userId], references: [id])\n  codeHash  String // bcrypt hash của mã 6 số\n  expiresAt DateTime\n  usedAt    DateTime?\n  createdAt DateTime  @default(now())\n\n  @@index([userId])\n}\n",
  "inlineSchemaHash": "71c50530480981c67301a83403d7c2f39708f59f9da9d85f7f141768b237e080",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fullName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"patient\",\"kind\":\"object\",\"type\":\"PatientProfile\",\"relationName\":\"PatientProfileToUser\"},{\"name\":\"doctor\",\"kind\":\"object\",\"type\":\"DoctorProfile\",\"relationName\":\"DoctorProfileToUser\"},{\"name\":\"appointmentsPatient\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"PatientAppointments\"},{\"name\":\"appointmentsDoctor\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"DoctorAppointments\"},{\"name\":\"notifications\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"NotificationToUser\"},{\"name\":\"PasswordReset\",\"kind\":\"object\",\"type\":\"PasswordReset\",\"relationName\":\"PasswordResetToUser\"}],\"dbName\":null},\"PatientProfile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PatientProfileToUser\"},{\"name\":\"dob\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"gender\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"medicalHistory\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"medications\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"allergies\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"insuranceNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emergencyContact\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"DoctorProfile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"DoctorProfileToUser\"},{\"name\":\"specialty\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"yearsExperience\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"clinicName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"slots\",\"kind\":\"object\",\"type\":\"DoctorSlot\",\"relationName\":\"DoctorProfileToDoctorSlot\"}],\"dbName\":null},\"DoctorSlot\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"doctorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"doctor\",\"kind\":\"object\",\"type\":\"DoctorProfile\",\"relationName\":\"DoctorProfileToDoctorSlot\"},{\"name\":\"start\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"end\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isBooked\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"appointments\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToDoctorSlot\"}],\"dbName\":null},\"Appointment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"patientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"patient\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PatientAppointments\"},{\"name\":\"doctorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"doctor\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"DoctorAppointments\"},{\"name\":\"slotId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slot\",\"kind\":\"object\",\"type\":\"DoctorSlot\",\"relationName\":\"AppointmentToDoctorSlot\"},{\"name\":\"service\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scheduledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"AppointmentStatus\"},{\"name\":\"paymentStatus\",\"kind\":\"enum\",\"type\":\"PaymentStatus\"},{\"name\":\"paymentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"qrCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cancelReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"payment\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"AppointmentToPayment\"}],\"dbName\":null},\"Payment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"appointmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"appointment\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToPayment\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerRef\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"PaymentStatus\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Notification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NotificationToUser\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"body\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"data\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"readAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"PasswordReset\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PasswordResetToUser\"},{\"name\":\"codeHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"usedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

